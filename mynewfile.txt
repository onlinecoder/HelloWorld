This is a new file in dev branch



function isValid(twoChar) {
    n = parseInt(twoChar);
    if (n >= 0 && n < 26){
        return true;
    } else {
        return false;
    }
}

function countWays(input, rest){
    console.log(input, rest);
    if (rest.length == 0) {
        console.log('end****');
        return 1;
    }
    cnt1 = countWays(input+rest.substr(0,1)+' ', rest.substr(1));
    cnt2 = 0;
    if (rest.length >= 2) {
        twoChar = rest.substr(0,2);
        isv = isValid(twoChar);
        if (isv) {
            cnt2 = countWays(input+rest.substr(0,2)+ ' ', rest.substr(2));
        }
    }

    return cnt1 + cnt2;        
}


function findRangeOverlap(point1, length1, point2, length2) {

  // Find the highest start point and lowest end point.
  // The highest ("rightmost" or "upmost") start point is
  // the start point of the overlap.
  // The lowest end point is the end point of the overlap.
  const highestStartPoint = Math.max(point1, point2);
  const lowestEndPoint = Math.min(point1 + length1, point2 + length2);

  // Return null overlap if there is no overlap
  if (highestStartPoint >= lowestEndPoint) {
    return { startPoint: null, overlapLength: null };
  }

  // Compute the overlap length
  const overlapLength = lowestEndPoint - highestStartPoint;

  return { startPoint: highestStartPoint, overlapLength: overlapLength };
}

function findRectangularOverlap(rect1, rect2) {

  // Get the x and y overlap points and lengths
  const xOverlap = findRangeOverlap(rect1.leftX, rect1.width, rect2.leftX, rect2.width);
  const yOverlap = findRangeOverlap(rect1.bottomY, rect1.height, rect2.bottomY, rect2.height);

  // Return null rectangle if there is no overlap
  if (!xOverlap.overlapLength || !yOverlap.overlapLength) {
    return {
      leftX: 0,
      bottomY: 0,
      width: 0,
      height: 0,
    };
  }

  return {
    leftX: xOverlap.startPoint,
    bottomY: yOverlap.startPoint,
    width: xOverlap.overlapLength,
    height: yOverlap.overlapLength,
  };
}
